@page "/popover/overview"

<link rel="stylesheet" href="css/popover/PopOverOverview.css?version=0.0.958" />

<h2>PopOver / Overview</h2>
<div class="sample-block">
    <IntegralUIPopOver Settings="@currentSettings" Visible="@isPopoverVisible" VisibleChanged="@popoverVisibleChanged">
        <ChildContent>
            <div class="sample-block-content">Click or Touch to Show a Popup</div>
        </ChildContent>
        <ContentTemplate>
            <div class="popover-header">
                <div class="popover-close-button" @onclick="btnOk"><span></span></div>
                <span class="popover-title">@popoverTitle</span>
            </div>
            <div class="popover-content">
                <div>Curabitur pretium tincidunt lacus. Nulla gravida orci a odio.</div>
                <IntegralUIButton Id="" Click="btnOk">Ok</IntegralUIButton>
            </div>
        </ContentTemplate>
    </IntegralUIPopOver>
    <div class="feature-help">
        <p><span class="initial-space"></span><strong><span class="code-name">IntegralUI</span> PopOver</strong> is a Blazor component that displays custom HTML content over specified element. It provides functionality that allows you to add a popover that will be displayed at specified position, with initial delay and how much time will remain active. This component is inherited from Tooltip component.</p>
        <p><span class="initial-space"></span>By moving the mouse cursor inside the element space, the PopOver will appear at position specfied in the control panel. The example uses a simple template that contais some text, you can modify it and add any custom HTML elements or other components in it.</p>
        <p><span class="initial-space"></span>In this example, there is a control panel where you can set different properties of PopOver component. You can choose the initial delay before popover is shown, how long it will remain visible, position at which will appear and whether it is enabled or not.</p>
        <p><span class="initial-space"></span>If activation is set to Manual, the popup will remain active until it's closed by changing the Visible property to false. If Visible property is not specified, then the popover will appear on mouse enter.</p>
        <p><span class="initial-space"></span>The following properties and events are supported:</p>
        <ul class="feature-points">
            <li><span class="code-name">Adjustment</span> - specifies the X and Y values by which Left and Top positions are adjusted</li>
            <li><span class="code-name">AllowAnimation</span> - determines whether animations are allowed or not, default is true</li>
            <li><span class="code-name">ColorScheme</span> - specifies the current color scheme in use: Light or Dark, by default is set to Light</li>
            <li><span class="code-name">Enabled</span> - determines whether the PopOver is enabled or disabled</li>
            <li><span class="code-name">Name</span> - Uniquely identifies the component</li>
            <li><span class="code-name">Settings</span> - specifies the component settings like: Activation, AutoPopDelay, InitialDelay, Position and ShowMarker</li>
            <li><span class="code-name">Theme</span> - specifies the current Theme in use, by default is set to Office</li>
            <li><span class="code-name">Closed</span> - occurs when PopOver content is hidden</li>
            <li><span class="code-name">EnabledChanged</span> - occurs when Enabled property value changes</li>
            <li><span class="code-name">Opened</span> - occurs when PopOver content is shown</li>
            <li><span class="code-name">VisibleChanged</span> - occurs when Visible property value changes</li>
        </ul>
    </div>
</div>

@code {

    private IntegralUISize ctrlSize = new() { Width = 250 };
    private IntegralUIPopupSettings currentSettings = new()
        {
            Activation = IntegralUIPopupActivation.Manual,
            AutoPopDelay = 3000,
            InitialDelay = 500,
            Position = IntegralUIDisplayPosition.Above,
            ShowMarker = true
        };

    private bool isPopoverVisible = false;
    private string popoverTitle = "PopOver Title";

    private void btnOk()
    {
        isPopoverVisible = false;
    }

    private void popoverVisibleChanged(bool value)
    {
        isPopoverVisible = value;
    }
}
